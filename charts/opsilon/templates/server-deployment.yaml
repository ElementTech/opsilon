apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-server
  labels:
    app: {{ template "name" . }}-server
    chart: {{ template "chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.server.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "name" . }}-server
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "name" . }}-server
        release: {{ .Release.Name }}
{{- with .Values.server.annotations }}
      annotations:
{{ toYaml . | indent 8 }}       
{{- end }}
    spec:
      # Service Account creation
      {{- if or (eq .Values.serviceAccount.enabled true) (eq .Values.rbac.create true) }}
      serviceAccountName: {{ template "name" . }}
      {{- end }}    
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}    
      restartPolicy: Always
      volumes:
      - name: cache-volume
        emptyDir: {}  
      containers:
        {{- if (eq .Values.server.slackMode true) }}
        - name: slack    
          image: "{{ .Values.server.image.repository }}:{{ .Values.server.image.tag }}"
          imagePullPolicy: {{ .Values.server.image.pullPolicy }}
          command: ["./opsilon","server"]
          args: [
            "--consul",
            "--database",
            "--kubernetes",
            "--consul_uri={{ template "name" . }}-consul-headless:8500",
            "--mongodb_uri=mongodb://{{ template "name" . }}-mongodb-headless:27017"
          ]
          {{- if or $.Values.env $.Values.envSecrets }}
          env:        
            {{- range $key, $value := $.Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $key, $secret := $.Values.envSecrets }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secret }}
                  key: {{ $key | quote }}
            {{- end }}
          {{- end }}                                     
          resources:      
{{ toYaml .Values.server.resources | indent 12 }}          
        {{- end }} 
        - name: {{ .Chart.Name }}
          volumeMounts:
          - mountPath: /
            name: cache-volume 
          image: "{{ .Values.server.image.repository }}:{{ .Values.server.image.tag }}"
          imagePullPolicy: {{ .Values.server.image.pullPolicy }}
          command: ["./opsilon","server"]
          args: [
            "--consul",
            "--database",
            "--kubernetes",
            "--consul_uri={{ template "name" . }}-consul-headless:8500",
            "--mongodb_uri=mongodb://{{ template "name" . }}-mongodb-headless:27017",
            "--port={{ .Values.server.service.port }}"
          ]
          {{- if or $.Values.env $.Values.envSecrets }}
          env:        
            {{- range $key, $value := $.Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $key, $secret := $.Values.envSecrets }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secret }}
                  key: {{ $key | quote }}
            {{- end }}
          {{- end }}                                     
          ports:
            - name: http
              containerPort: {{ .Values.server.service.port }}
              protocol: TCP
          resources:
{{ toYaml .Values.server.resources | indent 12 }}
    {{- with .Values.server.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.server.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.server.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}