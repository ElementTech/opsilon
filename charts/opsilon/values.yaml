# Default values for opsilon.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

client:
  replicaCount: 1
  image:
    repository: jatalocks333/opsilon-web
    tag: latest
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 80
    annotations: {}
  env: []
  envSecrets: []
  annotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  resources: {}

server:
  slackMode: false
  replicaCount: 1
  image:
    repository: jatalocks333/opsilon
    tag: latest
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 8080
    annotations: {}
  env: # Relevant for slackMode=true
    SLACK_BOT_TOKEN: xoxb-123
    SLACK_APP_TOKEN: xapp-123
  envSecrets: []
  annotations: {}    
  nodeSelector: {}
  tolerations: []
  affinity: {}
  resources: {}
  # Whether or not to enable autoscaling
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 8
    targetCPUUtilizationPercentage: 75
    targetMemoryUtilizationPercentage: 90  

ingress:
  enabled: false
  annotations: {}
  path: /
  hosts:
    - opsilon.my.domain
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

mongodb:
  persistence:
    enabled: true
  architecture: replicaset
  replicaCount: 2
  auth:
    enabled: false
    # usernames: 
    #   - user
    # passwords: 
    #   - password
    # databases: 
    #   - opsilon

# This is for service accounts
serviceAccount:
  # Disabled by default, set to true if you want
  enabled: true
  # Add annotations if desited,
  annotations: {}
    # Here's an example of assigning an IAM role to a pod
    # eks.amazonaws.com/role-arn: arn:aws:iam::123123123:role/role-name-goes-here

## For RBAC support, enable if you want, and set the rules you wish, examples below
rbac:
  create: true
  rules:
    - resources: ["pods", "pods/log", "pods/exec", "serviceaccount"]
      verbs: ["*"]
    ## Define specific rbac permissions.
    # Eg: This grants all on API groups
    # - apiGroups: ['*']
    #   resources: ['*']
    #   verbs: ['*']
    # Eg: This grants all on non resource URLs
    # - nonResourceURLs: ['*']
    #   verbs: ['*']
    # Eg: This is "readonly" for common resources
    # - resources: ["deployments", "configmaps", "pods", "pods/log", "services", "jobs", "jobs/status", "nodes", "serviceaccount", "namespaces"]
    #   verbs: ["get", "list", "watch"]

  ## Make this into a clusterwide role to give access to all namespaces if desired, disabled by default for more security
  clusterWideAccess: true