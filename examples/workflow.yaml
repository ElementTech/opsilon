# ID of job
id: example

# Help Description
description: this is an example workflow which includes all of opsilon capabilities

# Global Docker Image. Used if no Stage specific image is specified.
image: alpine:latest

# Global Environment Variables for use inside the containers.
env:
  - name: filename
    value: testValue

# Inputs for users to enter in the CLI when using 'run'
input:
  - name: arg1
  - name: arg2
    default: defaultvalue
  - name: arg3
    optional: true # If skipped in the CLI input phase, will default to an empty string [($arg3 == "") == true]

# Must include at least one stage
stages:
  - stage: write a file # Name of the stage. These can be non-unique.
    id: writefile # ID of the stage. Used for 'outputs' and 'needs'
    image: ubuntu:latest # Override global image for this stage only.
    env: # Stage specific environment variables
      - name: onlyhere
        value: something
    # 'If' statements support normal mathematical expressions. 
    # Variables can be any variable available to the stage (Using '$' sign).
    if: $arg3 != "" # Skip if arg3 is empty. Run if not. 
    script: # Array of arguments to the container. $OUTPUT contains an output file. every key=value here will be available for export.
      - sh
      - -c
      - |
        echo "Starting Stage"
        echo "exportedArg=i_am_an_output" >> $OUTPUT
        mkdir testdir1
        echo $arg3 >> testdir1/test.txt
    artifacts: # Will be saved to the Working Directory where opsilon CLI was run from.
      - testdir1
      - test.txt # Will not exist, the runner will ignore this and pring a warning.
  - stage: write a file
    id: writefile2
    needs: writefile # will get the outputs of the stage with this ID
    clean: true # this stage will not share a filesystem with the other stages. It will start with a clean /app as working directory.
    if: $arg4 == "runme"
    script:
      - sh
      - -c
      - mkdir testdir2 && echo $arg4 >> testdir2/test.txt && ls -l
    artifacts:
      - testdir2
      - testdir2/test.txt
  - stage: read the file
    id: readfile
    script:
      - sh
      - -c
      - ls -l && cat test.txt
  - stage: just a random step
    id: testme
    needs: writefile2
    script:
      - sh
      - -c
      - ls -l && cat test.txt
  - stage: just a random step
    id: testme2
    needs: writefile2
    script:
      - sh
      - -c
      - ls -l && cat test.txt            