# ID of job
id: example-full

# Help Description
description: this is an example workflow which includes all of opsilons capabilities

# Global Docker Image. Used if no Stage specific image is specified.
image: alpine:latest

# Global Environment Variables for use inside the containers.
env:
  - name: filename
    value: testValue

# Inputs for users to enter in the CLI when using 'run'
input:
  - name: arg1
  - name: arg2
    default: defaultvalue
    optional: true
  - name: arg3
    optional: true # If skipped in the CLI input phase, will default to an empty string [($arg3 == "") == true]

# Stages Rules
# 1. All stages will run in parallel unless they have a "needs" field
stages:
  - stage: write a file # Name of the stage. These can be non-unique.
    id: writefile # ID of the stage. Used for 'outputs' and 'needs'. These need to be unique.
    image: ubuntu:latest # Override global image for this stage only.
    env: # Stage specific environment variables
      - name: onlyhere
        value: something
    # 'If' statements support normal mathematical expressions. 
    # Variables can be any variable available to the stage (Using '$' sign).
    if: $arg3 != "" # Skip if arg3 is empty. Run if not. 
    script: # Array of arguments to the container. $OUTPUT contains an output file. every key=value here will be available for export.
      - sh
      - -c
      - |
        echo "Starting Stage"
        echo "exportedArg=i_am_an_output" >> $OUTPUT
        cat $OUTPUT
        mkdir testdir1
        cd testdir1
        echo $arg3 > test.txt
        echo "Stage Ended"
        cd ..
        echo $arg3 > test.txt
        ls -l
    artifacts: # Will be saved to the Working Directory where opsilon CLI was run from.
      - testdir1
      - test.txt
  - stage: write a file
    id: writefile2
    needs: writefile # Will get the outputs of the stage with this ID. Comma Separated list of stage IDs
    import:
      - from: writefile
        artifacts:
          - testdir1
    if: $exportedArg == "wrong_output" # Run only if the output of the step it needs is equal this string.
    script:
      - sh
      - -c
      - |
        ls -l
        mkdir testdir2
        echo "I am another stage"
        echo $exportedArg >> testdir2/test.txt
        ls -l
    artifacts:
      - testdir2 # Copies files inside it.
      - testdir1 # Copies files inside it.
      - testdir2/test.txt # It has no effect to copy file twice.
  - stage: write a file
    id: writefile3
    needs: writefile # Will get the outputs of the stage with this ID. Comma Separated list of stage IDs
    import:
      - from: writefile
        artifacts:
          - testdir1
          - test.txt
    if: $exportedArg == "i_am_an_output" # Run only if the output of the step it needs is equal this string.
    script:
      - sh
      - -c
      - |
        mkdir testdir3
        echo "I am another stage"
        echo $exportedArg >> testdir3/test.txt
        ls -l -a
    artifacts:
      - testdir3 # Copies files inside it.
  - stage: read the file
    id: readfile
    needs: writefile3 # Comma Separated list of stage IDs
    if: $exportedArg == "wrong_output"
    script:
      - sh
      - -c
      - cat testdir1/test.txt
